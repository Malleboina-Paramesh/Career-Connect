generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // for postgres db
  // url      = "file:./dev.db" // for sqlite db
}

// top level roles
enum Role {
  ADMIN
  STUDENT
  MENTOR
}

enum AdminType {
  MASTER_ADMIN // will have access to everything
  MENTOR_ADMIN // will able to add mentors
  STUDENT_ADMIN // will able ro add students
  COURSE_ADMIN // can create courses
}

// mentor types
enum MentorType {
  TRAINER_MENTOR
  ADVISOR_MENTOR
  COMPANY_MENTOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified DateTime @map("email_verified")
  password      String?
  role          Role
  isVerified    Boolean  @default(false) @map("is_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // for all users this is common
  Profile Profile?

  //based on the role he has
  Student Student?
  Mentor  Mentor?
  Admin   Admin?

  accounts Account[] // this is for auth providers like google, facebook, etc (do not touch)

  @@map("users")
}

model Admin {
  id        String    @id @default(cuid())
  role      AdminType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  // User who is an admin
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  //who created this admin
  createdBy String? @map("created_by")

  //he will be do things based on the role he has
  mentorsCreated   Mentor[]           @relation("mentorsCreated")
  coursesCreated   Course[]           @relation("coursesCreated")
  studentsCreated  Student[]          @relation("studentsCreated")
  StudentsEnrolled CourseEnrollMent[] @relation("studentsEnrolled")
  // Company          Company[]          @relation("companies") // companies created by this admin

  @@map("admins")
}

model Student {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // User who is a student
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Admin who created this student
  AdminId String
  Admin   Admin  @relation("studentsCreated", fields: [AdminId], references: [id])

  // courses enrolled by this student
  CourseEnrollMent CourseEnrollMent[]
  JobApplication   JobApplication[]
  CompanyFavorite  CompanyFavorite[]

  @@map("students")
}

model Profile {
  id         String   @id @default(cuid())
  name       String?
  bio        String?
  image      String?
  location   String?
  phone      String?
  profession String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  // User who has this profile
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Mentor {
  id         String     @id @default(cuid())
  mentorType MentorType @map("mentor_type") // mentor, trainer, advisor
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")

  // User who is a mentor
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Admin who created this mentor
  AdminId String @map("admin_id")
  Admin   Admin  @relation("mentorsCreated", fields: [AdminId], references: [id]) // Admin who created this mentor

  companys Company[] @relation("companies")

  @@map("mentors")
}

model Company {
  id          String @id @default(cuid())
  title       String @unique
  description String
  location    String
  logo        String
  website     String
  linkedin    String
  process     String @default("") // interview process details
  sections    String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Mentor who is managing this company
  mentorId String? @map("mentor_id")
  Mentor   Mentor? @relation("companies", fields: [mentorId], references: [id])

  // or global admin can create companies
  // AdminId String? @map("admin_id")
  // Admin   Admin?  @relation("companies", fields: [AdminId], references: [id])

  // jobs in this company
  Jobs            Job[]             @relation("jobs")
  CompanyFavorite CompanyFavorite[] // students who favorited this company
  // Admin   Admin?  @relation(fields: [adminId], references: [id])
  // adminId String?

  @@map("companies")
}

model CompanyFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  studentId String  @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([companyId, studentId])
  @@map("company_favorites")
}

model Job {
  id            String   @id @default(cuid())
  role          String
  description   String
  location      String
  salary        Float
  noOfOpenings  Int
  applyLink     String   @map("apply_link")
  images        String?
  lastDate      DateTime @map("last_date")
  passedOutyear Int      @map("graduation_year")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Mentor who is managing this company
  companyId      String           @map("company_id")
  Company        Company          @relation("jobs", fields: [companyId], references: [id], onDelete: Cascade)
  JobApplication JobApplication[]

  @@map("jobs")
}

model JobApplication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  jobId     String  @map("job_id")
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  studentId String  @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([jobId, studentId])
  @@map("job_applications")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

model CourseCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Courses in this category
  courses Course[] @relation("categoryToCourses")

  @@map("course_categories")
}

// Courses
model Course {
  id          String       @id @default(cuid())
  title       String       @unique
  description String
  price       Float
  duration    Int
  status      CourseStatus @default(DRAFT)
  image       String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")

  // Category relationship
  categoryId String         @map("category_id")
  category   CourseCategory @relation("categoryToCourses", fields: [categoryId], references: [id])

  // Course modules
  modules CourseModule[] @relation("courseToModules")

  // Admin who created this course
  Adminid String @map("admin_id")
  Admin   Admin  @relation("coursesCreated", fields: [Adminid], references: [id])

  // students enrolled in this course
  CourseEnrollMent CourseEnrollMent[]

  @@map("courses")
}

model CourseModule {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int // To maintain sequence of modules
  content     String // Could be rich text or markdown
  duration    Int // Duration in minutes
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Course relationship
  courseId String @map("course_id")
  course   Course @relation("courseToModules", fields: [courseId], references: [id], onDelete: Cascade)

  // Module lessons
  lessons ModuleLesson[] @relation("moduleToLessons")

  @@unique([courseId, order])
  @@map("course_modules")
}

model ModuleLesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String // Could be rich text or markdown
  order       Int // To maintain sequence of lessons
  duration    Int // Duration in minutes
  videoUrl    String?  @map("video_url")
  resources   String? // JSON string containing additional resources
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Module relationship
  moduleId String       @map("module_id")
  module   CourseModule @relation("moduleToLessons", fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, order])
  @@map("module_lessons")
}

model CourseEnrollMent {
  id String @id @default(cuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  courseId  String  @map("course_id")
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId String  @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Admin who enrolled this student in this course
  AdminId String
  Admin   Admin  @relation("studentsEnrolled", fields: [AdminId], references: [id])

  @@unique([courseId, studentId])
  @@map("course_enrollments")
}
